name: Deploy project

on:
  push:
    branches: [ main ]

jobs:
  run-tests:
    name: Run tests
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the files
      uses: actions/checkout@v3
    
    - name: Get project secrets
      env:
        ATHENA_PROJECT_SECRETS: ${{ secrets.ATHENA_PROJECT_SECRETS }}
      run: |
        echo $ATHENA_PROJECT_SECRETS | base64 -d > compose-prod.env
    
    - name: Build test image and run
      run: |
        docker compose --env-file=compose-prod.env --file=compose-tests.yaml down --remove-orphans
        docker compose --env-file=compose-prod.env --file=compose-tests.yaml build
        docker compose --env-file=compose-prod.env --file=compose-tests.yaml run ares-pylint
        docker compose --env-file=compose-prod.env --file=compose-tests.yaml run ares-flake8
        docker compose --env-file=compose-prod.env --file=compose-tests.yaml run ares-tests
        docker compose --env-file=compose-prod.env --file=compose-tests.yaml run apollo-pylint
        docker compose --env-file=compose-prod.env --file=compose-tests.yaml run apollo-flake8

  deploy:
    name: Deploy to EC2
    timeout-minutes: 5
    needs: run-tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout the files
      uses: actions/checkout@v3

    - name: Get project secrets
      env:
        ATHENA_PROJECT_SECRETS: ${{ secrets.ATHENA_PROJECT_SECRETS }}
        ATHENA_PROJECT_TRAEFIK: ${{ secrets.ATHENA_PROJECT_TRAEFIK }}
      run: |
        echo $ATHENA_PROJECT_SECRETS | base64 -d > compose-prod.env
        echo $ATHENA_PROJECT_TRAEFIK | base64 -d > traefik-prod.toml

    - name: Deploy to Server
      uses: easingthemes/ssh-deploy@main
      env:
        SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        REMOTE_USER: ${{ secrets.REMOTE_USER }}
        TARGET: ${{ secrets.REMOTE_TARGET }}
        ARGS: "-rltgoDzvO --delete"
        SOURCE: "./"

        SCRIPT_BEFORE: |
          ls
          mkdir -p project
          mv compose-prod.env traefik-prod.toml project/
        SCRIPT_AFTER: |
          cd project
          docker compose --env-file=compose-prod.env --file=compose-prod.yaml down --remove-orphans
          docker compose --env-file=compose-prod.env --file=compose-prod.yaml build
          docker compose --env-file=compose-prod.env --file=compose-prod.yaml up -d

        EXCLUDE: "**/.env, **/__pycache__, **/*.pyc, **/.git, **/.code-workspace, **/.github, **/local_ssh_script-before.sh"