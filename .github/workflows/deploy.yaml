name: Deploy project

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  run-tests-on-staging:
    name: Build project and run tests
    runs-on: ubuntu-latest
    timeout-minutes: 5
    environment:
      name: Staging    
    steps:
    - name: Checkout the files
      uses: actions/checkout@v3
    
    - name: Get project secrets
      env:
        ATHENA_PROJECT_SECRETS: ${{ secrets.ATHENA_PROJECT_SECRETS }}
      run: |
        echo $ATHENA_PROJECT_SECRETS | base64 -d > compose-staging.env
    
    - name: Build test image and run
      run: |
        docker compose --env-file=compose-staging.env --file=compose-tests.yaml down --remove-orphans
        docker compose --env-file=compose-staging.env --file=compose-tests.yaml build
        docker compose --env-file=compose-staging.env --file=compose-tests.yaml run ares-pylint
        docker compose --env-file=compose-staging.env --file=compose-tests.yaml run ares-flake8
        docker compose --env-file=compose-staging.env --file=compose-tests.yaml run ares-tests
        docker compose --env-file=compose-staging.env --file=compose-tests.yaml run apollo-pylint
        docker compose --env-file=compose-staging.env --file=compose-tests.yaml run apollo-flake8

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: run-tests-on-staging
    if: github.ref == 'refs/heads/main'
    environment:
      name: Staging
      url: https://test.athena-project.dev  
    steps:
    - name: Pre-checkout files
      run: |
        rm -rf project/ares
        rm -rf project/apollo

    - name: Checkout the files
      uses: actions/checkout@v3

    - name: Get project secrets from secret
      env:
        ATHENA_PROJECT_SECRETS: ${{ secrets.ATHENA_PROJECT_SECRETS }}
      run: |
        echo $ATHENA_PROJECT_SECRETS | base64 -d > compose-staging.env
        ls

    - name: Deploy to EC2 Instance
      uses: easingthemes/ssh-deploy@main
      env:
        SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        REMOTE_USER: ${{ secrets.REMOTE_USER }}
        TARGET: ${{ secrets.REMOTE_TARGET }}
        SOURCE: "./"

        SCRIPT_AFTER: |
          echo "starting script_after"
          cd project
          docker compose --env-file=compose-staging.env --file=compose-staging.yaml down --remove-orphans
          docker compose --env-file=compose-staging.env --file=compose-staging.yaml build
          docker compose --env-file=compose-staging.env --file=compose-staging.yaml up -d
          echo "removing dangling images"
          docker rmi -f $(docker images -f "dangling=true" -q)
          echo "removing unused files"
          rm *local*
          rm *tests*
          rm *prod*
          rm README.md
          echo "script_after ended"

        EXCLUDE: |
          **/.env
          **/__pycache__
          **/*.pyc
          **/.git
          **/.code-workspace
          **/.github
          **/local_ssh_script-before.sh