services:
  database:
    image: postgres:15
    restart: always
    # command: postgres -c 'max_connections=300'
    container_name: athena-database-container
    env_file: compose-prod.env
    volumes:
       - postgres:/var/lib/postgresql/data
    ports:
      - ${EXPOSED_DATABASE_PORT}:5432

  alembic:
    build:
      context: ./ares/
      dockerfile: Dockerfile
    container_name: athena-alembic-container
    env_file: compose-prod.env
    depends_on:
      - database
    image: athena-project-ares
    command: bash -c "
      cd .. &&\
      sleep 1 &&\
      alembic upgrade head"
    volumes_from:
      - database
  
  traefik:
    image: traefik:v2.10.1
    container_name: athena-traefik-container
    command:
      - "--log.level=INFO"
      - "--accesslog"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      # - "--entrypoints.web.address=:443"
      # - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      # - "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      # - "--certificatesresolvers.myresolver.acme.email=${CERT_EMAIL}"
      # - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      # - "443:443"
      - "8080:8080"
    volumes:
      # - ./letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.routers.dashboard.rule=Host(`dashboard-traefik.athena-project.dev`) && PathPrefix(`/`)"
    #   - "traefik.http.routers.dashboard.tls=true"
    #   - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
    #   - "traefik.http.routers.dashboard.service=api@internal"
    #   - "traefik.http.routers.dashboard.middlewares=auth"
    #   - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_USER}:${TRAEFIK_PASSWORD}"

  ares:
    build:
      context: ./ares/
      dockerfile: Dockerfile
    container_name: athena-ares-container
    restart: on-failure
    env_file: compose-prod.env
    depends_on:
      - alembic
    image: athena-project-ares
    command: bash -c "
      sleep 3 &&\
      uvicorn main:app --workers 1 --host 0.0.0.0 --port 8000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ares.entrypoints=web"
      - "traefik.http.routers.ares.rule=(Host(`athena-project.dev`, `www.athena-project.dev`) || Host(`${STATIC_IP_INSTANCE}`)) && PathPrefix(`/api`)"
      - "traefik.http.routers.ares.service=ares"
      - "traefik.http.services.ares.loadbalancer.server.port=8000"
      - "traefik.http.middlewares.ares.stripprefix.prefixes=/api"
      - "traefik.http.middlewares.ares.stripprefix.forceslash=false"
      - "traefik.http.routers.ares.middlewares=ares"      

  apollo:
    build:
      context: ./apollo/
      dockerfile: Dockerfile
    container_name: athena-apollo-container
    restart: on-failure
    env_file: compose-prod.env
    depends_on:
      - ares
      - traefik
    image: athena-project-apollo
    command: bash -c "
      sleep 4 &&\
      uvicorn main:app --workers 1 --host 0.0.0.0 --port 8001"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.apollo.entrypoints=web"
      - "traefik.http.routers.apollo.rule=Host(`athena-project.dev`, `www.athena-project.dev`) || Host(`${STATIC_IP_INSTANCE}`)"
      - "traefik.http.routers.apollo.service=apollo"
      - "traefik.http.services.apollo.loadbalancer.server.port=8001"
      - "traefik.http.routers.apollo.middlewares=redirect-www-to-non-www"
      - "traefik.http.middlewares.redirect-www-to-non-www.redirectregex.permanent=true"
      - "traefik.http.middlewares.redirect-www-to-non-www.redirectregex.regex=^https?://www.athena-project.dev/(.*)"
      - "traefik.http.middlewares.redirect-www-to-non-www.redirectregex.replacement=https?://athena-project.dev/$${1}"

volumes:
  postgres:
  # traefik-public-certificates: